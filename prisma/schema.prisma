// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  passwordHash   String?   // For credential provider
  image          String?
  totalSaved     Float     @default(0.00)
  currency       String    @default("MAD")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  savingsGoals  SavingsGoal[]
}

model Transaction {
  id              String   @id @default(cuid())
  originalAmount  Float
  roundedAmount   Float
  savingsAmount   Float
  merchant        String
  date            DateTime
  type            String   // e.g., "DEBIT", "CREDIT"
  status          String   // e.g., "PENDING", "PROCESSED", "SKIPPED"

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SavingsGoal {
  id             String   @id @default(cuid())
  name           String
  targetAmount   Float
  currentAmount  Float    @default(0.00)
  deadline       DateTime?
  status         String   @default("ACTIVE") // "ACTIVE", "COMPLETED", "CANCELLED"
  createdAt      DateTime @default(now())

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_goals")
}

// Optional: For Next-Auth v4 -- the VerificationToken model is required
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}